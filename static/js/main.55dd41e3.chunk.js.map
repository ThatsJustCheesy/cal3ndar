{"version":3,"sources":["Form.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["Form","props","action","apiURL","method","onSubmit","event","preventDefault","onSubmitInitiated","req","XMLHttpRequest","open","url","onload","status","onSubmitSuccess","onSubmitError","response","onerror","send","URLSearchParams","data","children","InputFormField","className","htmlFor","id","label","type","name","required","placeholder","onInput","value","target","setData","TextAreaFormField","rows","DateTimeFormField","Date","undefined","onChange","getTime","format","yearPlaceholder","monthPlaceholder","dayPlaceholder","minDate","SubmitButton","disabled","enabled","defaultCalendarSrc","App","useState","calendarSrc","setCalendarSrc","formEnabled","setFormEnabled","lastSubmissionStatus","setLastSubmissionStatus","lastSubmissionStatusText","formData","setFormData","title","src","style","borderWidth","width","height","frameBorder","scrolling","onLoad","err","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55dd41e3.chunk.js","sourcesContent":["import DateTimePicker from 'react-datetime-picker';\n\nexport function Form(props) {\n  function onSubmit(event) {\n    event.preventDefault();\n    \n    if (props.onSubmitInitiated) props.onSubmitInitiated();\n    \n    const req = new XMLHttpRequest();\n    req.open(props.method, props.url);\n    req.onload = () => {\n      ((200 <= req.status && req.status < 300) ? props.onSubmitSuccess : props.onSubmitError)(req.response);\n    };\n    req.onerror = props.onSubmitError;\n    req.send(new URLSearchParams(props.data));\n  }\n  \n  return (\n    <form action={props.apiURL + '/events'} method=\"post\" onSubmit={onSubmit}>\n      {props.children}\n    </form>\n  );\n}\n\nexport function InputFormField(props) {\n  return (\n      <div className=\"form-field\">\n        <label htmlFor={props.id}>{props.label} </label>\n        <input\n          className=\"input input-large\"\n          \n          type={props.type}\n          name={props.name ?? props.id}\n          id={props.id}\n          required={props.required}\n          placeholder={props.placeholder ?? (props.required ? 'Required' : '')}\n          \n          onInput={({target: {value}}) => props.setData({...props.data, [props.name ?? props.id]: value})}\n        />\n      </div>\n  );\n}\nexport function TextAreaFormField(props) {\n  return (\n      <div className=\"form-field\">\n        <label htmlFor={props.id}>{props.label} </label>\n        <textarea\n          className=\"input textarea-large\"\n          \n          name={props.name ?? props.id}\n          id={props.id}\n          required={props.required}\n          placeholder={props.placeholder ?? (props.required ? 'Required' : '')}\n          rows={props.rows}\n          \n          onInput={({target: {value}}) => props.setData({...props.data, [props.name ?? props.id]: value})}\n        />\n      </div>\n  );\n}\nexport function DateTimeFormField(props) {\n  const name = props.name ?? props.id;\n  return (\n      <div className=\"form-field\">\n        <label htmlFor={props.id}>{props.label} </label>\n        <DateTimePicker\n          className=\"input datetime-picker\"\n          \n          id={props.id}\n          value={props.data[name] ? new Date(1000 * props.data[name]) : undefined}\n          onChange={value => props.setData({...props.data, [name]: value.getTime() / 1000})}\n          format=\"y/MM/dd HH:mm\"\n          yearPlaceholder=\"year\"\n          monthPlaceholder=\"month\"\n          dayPlaceholder=\"day\"\n          minDate={new Date(1609477200000)} // 1 January 2021\n          \n          required={props.required}\n        />\n      </div>\n  );\n}\nexport function SubmitButton(props) {\n  return (\n    <div className=\"form-field\">\n      <button className=\"input button-large\" type=\"submit\" disabled={!props.enabled}>\n        {props.label}\n      </button>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport { Form, InputFormField, DateTimeFormField, TextAreaFormField, SubmitButton } from './Form.jsx';\nimport './App.css';\n\nconst defaultCalendarSrc = \"https://calendar.google.com/calendar/embed?height=600&wkst=1&bgcolor=%23ffffff&ctz=America%2FToronto&src=Zzh1ZGFmNWg1ZTBocmptc21mZm1nY3NxYzBAZ3JvdXAuY2FsZW5kYXIuZ29vZ2xlLmNvbQ&color=%23B39DDB&showTitle=0&showNav=1&showDate=1&showPrint=0&showCalendars=0&showTz=1&mode=AGENDA\";\n\nexport default function App(props) {\n  // Maintain as state to allow reloading frame contents.\n  const [calendarSrc, setCalendarSrc] = useState(defaultCalendarSrc);\n  \n  const [formEnabled, setFormEnabled] = useState(true);\n  const [lastSubmissionStatus, setLastSubmissionStatus] = useState('none');\n  \n  const lastSubmissionStatusText = {\n    'success': '‚úÖ Event added successfully; the calendar view may take a moment to refresh',\n    'failure': '‚ùå The request failed'\n  }[lastSubmissionStatus] ?? '';\n  \n  const [formData, setFormData] = useState({});\n  \n  return (\n    <div className=\"Outer\">\n      <h1>CalŒµnŒ¥ar üóì</h1>\n      <div className=\"App\">\n        \n        <div className=\"Calendar\">\n          <iframe\n            title=\"Google Calendar\"\n            src={calendarSrc}\n            style={{ borderWidth: 0 }}\n            width=\"600\"\n            height=\"600\"\n            frameBorder=\"0\"\n            scrolling=\"no\"\n            onLoad={event => {\n            }}\n          />\n        </div>\n        \n        <div>\n          <h2 className=\"flush-with-top\">Add new event</h2>\n          \n          <Form\n            url={props.apiURL + '/events'}\n            method=\"post\"\n            \n            data={formData}\n            \n            onSubmitInitiated={() => {\n              setLastSubmissionStatus('none');\n              setFormEnabled(false);\n            }}\n            \n            onSubmitSuccess={() => {\n              setLastSubmissionStatus('success');\n              setFormEnabled(true);\n              \n              // Reload the calendar view.\n              setCalendarSrc('');\n              setCalendarSrc(defaultCalendarSrc);\n            }}\n            onSubmitError={err => {\n              console.log('Form submission error: ' + err);\n              \n              setLastSubmissionStatus('failure');\n              setFormEnabled(true);\n            }}\n            \n          >\n            <InputFormField id=\"summary\" type=\"text\" label=\"Title\" required data={formData} setData={setFormData}/>\n            <DateTimeFormField id=\"start\" type=\"datetime-local\" label=\"Starts\" required data={formData} setData={setFormData}/>\n            <DateTimeFormField id=\"end\" type=\"datetime-local\" label=\"Ends\" required data={formData} setData={setFormData}/>\n            <TextAreaFormField id=\"description\" label=\"Description\" rows=\"6\" data={formData} setData={setFormData}/>\n            <InputFormField id=\"location\" type=\"text\" label=\"Location\" data={formData} setData={setFormData}/>\n            <SubmitButton enabled={formEnabled} label={formEnabled ? 'Add' : 'Adding‚Ä¶'} data={formData} setData={setFormData}/>\n          </Form>\n          \n          <p className={`note ${lastSubmissionStatus}-text`}>\n            {lastSubmissionStatusText}\n          </p>\n        </div>\n        \n      </div>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst apiURL = 'https://cal3ndar.herokuapp.com';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App apiURL={apiURL}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}